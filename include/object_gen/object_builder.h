#ifndef OBJECT_BUILDER_H
#define OBJECT_BUILDER_H

/* Generated by flatcc 0.6.2 FlatBuffers schema compiler for C by dvide.com */

#ifndef OBJECT_READER_H
#include "object_reader.h"
#endif
#ifndef FLATBUFFERS_COMMON_BUILDER_H
#include "flatbuffers_common_builder.h"
#endif
#include "flatcc/flatcc_prologue.h"
#ifndef flatbuffers_identifier
#define flatbuffers_identifier 0
#endif
#ifndef flatbuffers_extension
#define flatbuffers_extension "bin"
#endif

static const flatbuffers_voffset_t __FDrive_IntHash_required[] = { 0 };
typedef flatbuffers_ref_t FDrive_IntHash_ref_t;
static FDrive_IntHash_ref_t FDrive_IntHash_clone(flatbuffers_builder_t *B, FDrive_IntHash_table_t t);
__flatbuffers_build_table(flatbuffers_, FDrive_IntHash, 2)

static const flatbuffers_voffset_t __FDrive_StrHash_required[] = { 0 };
typedef flatbuffers_ref_t FDrive_StrHash_ref_t;
static FDrive_StrHash_ref_t FDrive_StrHash_clone(flatbuffers_builder_t *B, FDrive_StrHash_table_t t);
__flatbuffers_build_table(flatbuffers_, FDrive_StrHash, 2)

static const flatbuffers_voffset_t __FDrive_FloatHash_required[] = { 0 };
typedef flatbuffers_ref_t FDrive_FloatHash_ref_t;
static FDrive_FloatHash_ref_t FDrive_FloatHash_clone(flatbuffers_builder_t *B, FDrive_FloatHash_table_t t);
__flatbuffers_build_table(flatbuffers_, FDrive_FloatHash, 2)

static const flatbuffers_voffset_t __FDrive_Object_required[] = { 0 };
typedef flatbuffers_ref_t FDrive_Object_ref_t;
static FDrive_Object_ref_t FDrive_Object_clone(flatbuffers_builder_t *B, FDrive_Object_table_t t);
__flatbuffers_build_table(flatbuffers_, FDrive_Object, 3)

#define __FDrive_IntHash_formal_args , flatbuffers_string_ref_t v0, int32_t v1
#define __FDrive_IntHash_call_args , v0, v1
static inline FDrive_IntHash_ref_t FDrive_IntHash_create(flatbuffers_builder_t *B __FDrive_IntHash_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, FDrive_IntHash, FDrive_IntHash_file_identifier, FDrive_IntHash_type_identifier)

#define __FDrive_StrHash_formal_args , flatbuffers_string_ref_t v0, flatbuffers_string_ref_t v1
#define __FDrive_StrHash_call_args , v0, v1
static inline FDrive_StrHash_ref_t FDrive_StrHash_create(flatbuffers_builder_t *B __FDrive_StrHash_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, FDrive_StrHash, FDrive_StrHash_file_identifier, FDrive_StrHash_type_identifier)

#define __FDrive_FloatHash_formal_args , flatbuffers_string_ref_t v0, float v1
#define __FDrive_FloatHash_call_args , v0, v1
static inline FDrive_FloatHash_ref_t FDrive_FloatHash_create(flatbuffers_builder_t *B __FDrive_FloatHash_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, FDrive_FloatHash, FDrive_FloatHash_file_identifier, FDrive_FloatHash_type_identifier)

#define __FDrive_Object_formal_args , FDrive_IntHash_vec_ref_t v0, FDrive_StrHash_vec_ref_t v1, FDrive_FloatHash_vec_ref_t v2
#define __FDrive_Object_call_args , v0, v1, v2
static inline FDrive_Object_ref_t FDrive_Object_create(flatbuffers_builder_t *B __FDrive_Object_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, FDrive_Object, FDrive_Object_file_identifier, FDrive_Object_type_identifier)

__flatbuffers_build_string_field(0, flatbuffers_, FDrive_IntHash_key, FDrive_IntHash)
__flatbuffers_build_scalar_field(1, flatbuffers_, FDrive_IntHash_value, flatbuffers_int32, int32_t, 4, 4, INT32_C(0), FDrive_IntHash)

static inline FDrive_IntHash_ref_t FDrive_IntHash_create(flatbuffers_builder_t *B __FDrive_IntHash_formal_args)
{
    if (FDrive_IntHash_start(B)
        || FDrive_IntHash_key_add(B, v0)
        || FDrive_IntHash_value_add(B, v1)) {
        return 0;
    }
    return FDrive_IntHash_end(B);
}

static FDrive_IntHash_ref_t FDrive_IntHash_clone(flatbuffers_builder_t *B, FDrive_IntHash_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (FDrive_IntHash_start(B)
        || FDrive_IntHash_key_pick(B, t)
        || FDrive_IntHash_value_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, FDrive_IntHash_end(B));
}

__flatbuffers_build_string_field(0, flatbuffers_, FDrive_StrHash_key, FDrive_StrHash)
__flatbuffers_build_string_field(1, flatbuffers_, FDrive_StrHash_value, FDrive_StrHash)

static inline FDrive_StrHash_ref_t FDrive_StrHash_create(flatbuffers_builder_t *B __FDrive_StrHash_formal_args)
{
    if (FDrive_StrHash_start(B)
        || FDrive_StrHash_key_add(B, v0)
        || FDrive_StrHash_value_add(B, v1)) {
        return 0;
    }
    return FDrive_StrHash_end(B);
}

static FDrive_StrHash_ref_t FDrive_StrHash_clone(flatbuffers_builder_t *B, FDrive_StrHash_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (FDrive_StrHash_start(B)
        || FDrive_StrHash_key_pick(B, t)
        || FDrive_StrHash_value_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, FDrive_StrHash_end(B));
}

__flatbuffers_build_string_field(0, flatbuffers_, FDrive_FloatHash_key, FDrive_FloatHash)
__flatbuffers_build_scalar_field(1, flatbuffers_, FDrive_FloatHash_value, flatbuffers_float, float, 4, 4, 0.00000000f, FDrive_FloatHash)

static inline FDrive_FloatHash_ref_t FDrive_FloatHash_create(flatbuffers_builder_t *B __FDrive_FloatHash_formal_args)
{
    if (FDrive_FloatHash_start(B)
        || FDrive_FloatHash_key_add(B, v0)
        || FDrive_FloatHash_value_add(B, v1)) {
        return 0;
    }
    return FDrive_FloatHash_end(B);
}

static FDrive_FloatHash_ref_t FDrive_FloatHash_clone(flatbuffers_builder_t *B, FDrive_FloatHash_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (FDrive_FloatHash_start(B)
        || FDrive_FloatHash_key_pick(B, t)
        || FDrive_FloatHash_value_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, FDrive_FloatHash_end(B));
}

__flatbuffers_build_table_vector_field(0, flatbuffers_, FDrive_Object_ihash, FDrive_IntHash, FDrive_Object)
__flatbuffers_build_table_vector_field(1, flatbuffers_, FDrive_Object_shash, FDrive_StrHash, FDrive_Object)
__flatbuffers_build_table_vector_field(2, flatbuffers_, FDrive_Object_fhash, FDrive_FloatHash, FDrive_Object)

static inline FDrive_Object_ref_t FDrive_Object_create(flatbuffers_builder_t *B __FDrive_Object_formal_args)
{
    if (FDrive_Object_start(B)
        || FDrive_Object_ihash_add(B, v0)
        || FDrive_Object_shash_add(B, v1)
        || FDrive_Object_fhash_add(B, v2)) {
        return 0;
    }
    return FDrive_Object_end(B);
}

static FDrive_Object_ref_t FDrive_Object_clone(flatbuffers_builder_t *B, FDrive_Object_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (FDrive_Object_start(B)
        || FDrive_Object_ihash_pick(B, t)
        || FDrive_Object_shash_pick(B, t)
        || FDrive_Object_fhash_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, FDrive_Object_end(B));
}

#include "flatcc/flatcc_epilogue.h"
#endif /* OBJECT_BUILDER_H */
